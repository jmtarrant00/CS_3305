std	C:\Users\Jonathan\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^namespace std { template<typename _Tp> class shared_ptr {$/;"	namespace	line:1
shared_ptr	C:\Users\Jonathan\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^namespace std { template<typename _Tp> class shared_ptr { $/;"	class	line:1	namespace:std
operator ->	C:\Users\Jonathan\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    _Tp* operator->();$/;"	prototype	line:2	class:std::shared_ptr	access:private	signature:()	returns:_Tp 
reset	C:\Users\Jonathan\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    void reset( Y* ptr );$/;"	prototype	line:3	class:std::shared_ptr	access:private	signature:( Y* ptr )	returns:void 
reset	C:\Users\Jonathan\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    void reset( Y* ptr, Deleter d );$/;"	prototype	line:4	class:std::shared_ptr	access:private	signature:( Y* ptr, Deleter d )	returns:void 
reset	C:\Users\Jonathan\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    void reset( Y* ptr, Deleter d, Alloc alloc );$/;"	prototype	line:5	class:std::shared_ptr	access:private	signature:( Y* ptr, Deleter d, Alloc alloc )	returns:void 
get	C:\Users\Jonathan\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    _T* get() const;$/;"	prototype	line:6	class:std::shared_ptr	access:private	signature:() const
inorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.template	/^    template<class Process, class BTNode>     void inorder(Process f, BTNode *node_ptr) $/;"	function	line:10	signature:(Process f, BTNode *node_ptr)	returns:template void 
postorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.template	/^    template<class Process, class BTNode>     void postorder(Process f, BTNode *node_ptr) $/;"	function	line:21	signature:(Process f, BTNode *node_ptr)	returns:template void 
preorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.template	/^    template<class Process, class BTNode>     void preorder(Process f, BTNode *node_ptr) $/;"	function	line:32	signature:(Process f, BTNode *node_ptr)	returns:template void 
print	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.template	/^    template<class Item, class SizeType>     void print(binary_tree_node <Item> *node_ptr, SizeType depth) $/;"	function	line:43	signature:(binary_tree_node <Item> *node_ptr, SizeType depth)	returns:template void 
tree_clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.template	/^    template<class Item>     void tree_clear(binary_tree_node <Item> *&root_ptr) $/;"	function	line:55	signature:(binary_tree_node <Item> *&root_ptr)	returns:template void 
tree_copy	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.template	/^    template<class Item>     binary_tree_node <Item> *tree_copy(const binary_tree_node <Item> *root_ptr) $/;"	function	line:70	signature:(const binary_tree_node <Item> *root_ptr)	returns:template binary_tree_node <Item> 
tree_size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.template	/^    template<class Item>     size_t tree_size(const binary_tree_node <Item> *node_ptr) $/;"	function	line:87	signature:(const binary_tree_node <Item> *node_ptr)	returns:template size_t 
printMatrix	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix2.cpp	/^void printMatrix(int nodes, int A1[5][5])$/;"	function	line:18	signature:(int nodes, int A1[5][5])	returns:void 
findAn	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix2.cpp	/^void findAn(int nodes,int An[5][5], int Am[5][5], int A1[5][5])$/;"	function	line:38	signature:(int nodes,int An[5][5], int Am[5][5], int A1[5][5])	returns:void 
inDegrees	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix2.cpp	/^void inDegrees(int nodes, int A1[5][5])$/;"	function	line:62	signature:(int nodes, int A1[5][5])	returns:void 
outDegrees	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix2.cpp	/^void outDegrees(int nodes, int A1[5][5])$/;"	function	line:84	signature:(int nodes, int A1[5][5])	returns:void 
selfLoops	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix2.cpp	/^void selfLoops(int nodes, int A1[5][5])$/;"	function	line:104	signature:(int nodes, int A1[5][5])	returns:void 
cyclesLength	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix2.cpp	/^void cyclesLength(int nodes, int A1[5][5])$/;"	function	line:117	signature:(int nodes, int A1[5][5])	returns:void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix2.cpp	/^int main() {$/;"	function	line:122	signature:()	returns:int 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^void printMenu();$/;"	prototype	line:16	signature:()	returns:void 
userInput	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^void userInput();$/;"	prototype	line:17	signature:()	returns:void 
clrStack	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^template<class Item1> stack<Item1> clrStack(stack<Item1> clearStack); $/;"	prototype	line:18	signature:(stack<Item1> clearStack)	returns:template stack <Item1> 
topToBottom	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^template <class Item> void topToBottom(stack<Item> prtStack); $/;"	prototype	line:21	signature:(stack<Item> prtStack)	returns:template void 
bottomToTop	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^void bottomToTop(stack<double> bttStack);$/;"	prototype	line:22	signature:(stack<double> bttStack)	returns:void 
flipStack	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^stack<string> flipStack(stack<string> fpStack);$/;"	prototype	line:23	signature:(stack<string> fpStack)	returns:stack <string> 
searchStack	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^bool searchStack(stack<int> srchStack, int target);$/;"	prototype	line:24	signature:(stack<int> srchStack, int target)	returns:bool 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^int main() {$/;"	function	line:26	signature:()	returns:int 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^void printMenu() {$/;"	function	line:120	signature:()	returns:void 
userInput	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^void userInput() {$/;"	function	line:130	signature:()	returns:void 
clrStack	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^template<class Item1> stack<Item1> clrStack(stack<Item1> clearStack) { $/;"	function	line:134	signature:(stack<Item1> clearStack)	returns:template stack <Item1> 
topToBottom	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^template<class Item> void topToBottom(stack<Item> prtStack) { $/;"	function	line:143	signature:(stack<Item> prtStack)	returns:template void 
bottomToTop	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^void bottomToTop(stack<double> bttStack) {$/;"	function	line:164	signature:(stack<double> bttStack)	returns:void 
flipStack	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^stack<string> flipStack(stack<string> fpStack) {$/;"	function	line:180	signature:(stack<string> fpStack)	returns:stack <string> 
searchStack	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Stacks\testStack.cpp	/^bool searchStack(stack<int> srchStack, int target) {$/;"	function	line:191	signature:(stack<int> srchStack, int target)	returns:bool 
search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.template	/^template <class T> binary_tree_node<T> *binary_search_tree<T>::search(const T &key) const { $/;"	function	line:6	class:binary_search_tree	signature:(const T &key) const	returns:template binary_tree_node <T> binary_search_tree <T> :: 
insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.template	/^template <class T> bool binary_search_tree<T>::insert(const T &item) { $/;"	function	line:23	class:binary_search_tree	signature:(const T &item)	returns:template bool binary_search_tree <T> :: 
~binary_search_tree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.template	/^template <class T> binary_search_tree<T>::~binary_search_tree() { $/;"	function	line:52	class:binary_search_tree	signature:()	returns:template binary_search_tree <T> :: 
check_balanced	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.template	/^template <class T> int check_balanced(binary_tree_node<T> *root) { $/;"	function	line:62	signature:(binary_tree_node<T> *root)	returns:template int 
is_balanced	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.template	/^template <class T> int  binary_search_tree<T>::is_balanced() { $/;"	function	line:87	class:binary_search_tree	signature:()	returns:template int binary_search_tree <T> :: 
operator <<	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.template	/^template <class T> std::ostream &operator<<(std::ostream &out, const binary_tree_node<T> *root) { $/;"	function	line:92	signature:(std::ostream &out, const binary_tree_node<T> *root)	returns:template std :: ostream 
operator <<	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.template	/^template <class T> std::ostream &operator<<(std::ostream &out, const binary_search_tree<T> &tree) { $/;"	function	line:106	signature:(std::ostream &out, const binary_search_tree<T> &tree)	returns:template std :: ostream 
bst_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.template	/^template <class Item> bool bst_remove(binary_tree_node<Item>*& root_ptr, const Item& target) { $/;"	function	line:112	signature:(binary_tree_node<Item>*& root_ptr, const Item& target)	returns:template bool 
bst_remove_max	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.template	/^template <class Item> void bst_remove_max(binary_tree_node<Item>*& root_ptr, Item& removed) { $/;"	function	line:139	signature:(binary_tree_node<Item>*& root_ptr, Item& removed)	returns:template void 
remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.template	/^template <class T> bool binary_search_tree<T>::remove(const T &item) { $/;"	function	line:151	class:binary_search_tree	signature:(const T &item)	returns:template bool binary_search_tree <T> :: 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Average\AverageGrades.cpp	/^void printMenu();$/;"	prototype	line:15	signature:()	returns:void 
getInput	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Average\AverageGrades.cpp	/^int getInput() {$/;"	function	line:20	signature:()	returns:int 
getClassSize	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Average\AverageGrades.cpp	/^double getClassSize();$/;"	prototype	line:37	signature:()	returns:double 
getGrades	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Average\AverageGrades.cpp	/^int* getGrades(double classSize);$/;"	prototype	line:42	signature:(double classSize)	returns:int 
findAverage	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Average\AverageGrades.cpp	/^double findAverage(int grades[], int i, double classSize); $/;"	prototype	line:47	signature:(int grades[], int i, double classSize)	returns:double 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Average\AverageGrades.cpp	/^int main() {$/;"	function	line:49	signature:()	returns:int 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Average\AverageGrades.cpp	/^void printMenu(){$/;"	function	line:79	signature:()	returns:void 
getClassSize	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Average\AverageGrades.cpp	/^double getClassSize(){$/;"	function	line:92	signature:()	returns:double 
getGrades	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Average\AverageGrades.cpp	/^int* getGrades(double classSize) {$/;"	function	line:109	signature:(double classSize)	returns:int 
findAverage	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Average\AverageGrades.cpp	/^double findAverage(int grades[], int i, double classSize) {$/;"	function	line:139	signature:(int grades[], int i, double classSize)	returns:double 
THROTTLE_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.h	/^#define THROTTLE_H$/;"	macro	line:2
Throttle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.h	/^class Throttle$/;"	class	line:4
Throttle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.h	/^	Throttle();$/;"	prototype	line:8	class:Throttle	access:public	signature:()
Throttle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.h	/^	Throttle(int size);$/;"	prototype	line:9	class:Throttle	access:public	signature:(int size)
shut_off	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.h	/^	void shut_off() { position = 0; };$/;"	function	line:11	class:Throttle	access:public	signature:()	returns:void 
shift	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.h	/^	void shift(int amount);$/;"	prototype	line:12	class:Throttle	access:public	signature:(int amount)	returns:void 
~Throttle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.h	/^	~Throttle();$/;"	prototype	line:13	class:Throttle	access:public	signature:()
flow	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.h	/^	double flow() const { return position \/ double(top_position); };$/;"	function	line:16	class:Throttle	access:public	signature:() const	returns:double 
is_on	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.h	/^	bool is_on() const { return (position > 0);	};$/;"	function	line:17	class:Throttle	access:public	signature:() const	returns:bool 
top_position	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.h	/^	int top_position;$/;"	member	line:19	class:Throttle	access:private
position	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.h	/^	int position;$/;"	member	line:20	class:Throttle	access:private
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Queues\testPalindrome.cpp	/^void printMenu();$/;"	prototype	line:19	signature:()	returns:void 
lblPali	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Queues\testPalindrome.cpp	/^template<class Item> void lblPali(queue<Item> q, stack<Item> s); $/;"	prototype	line:21	signature:(queue<Item> q, stack<Item> s)	returns:template void 
print	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Queues\testPalindrome.cpp	/^template<class Item1> void print(stack<Item1> prt); $/;"	prototype	line:22	signature:(stack<Item1> prt)	returns:template void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Queues\testPalindrome.cpp	/^int main() {$/;"	function	line:24	signature:()	returns:int 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Queues\testPalindrome.cpp	/^void printMenu() {$/;"	function	line:90	signature:()	returns:void 
lblPali	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Queues\testPalindrome.cpp	/^template<class Item> void lblPali(queue<Item> q, stack<Item> s) { $/;"	function	line:99	signature:(queue<Item> q, stack<Item> s)	returns:template void 
print	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A4_Queues\testPalindrome.cpp	/^template<class Item1> void print(stack<Item1> prt) { $/;"	function	line:117	signature:(stack<Item1> prt)	returns:template void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Stacks\stacks.cpp	/^int main() {$/;"	function	line:5	signature:()	returns:int 
PRIORITY_QUEUE_HEAP_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.h	/^#define PRIORITY_QUEUE_HEAP_H$/;"	macro	line:10
priority_queue_heap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.h	/^template <class T> class priority_queue_heap { $/;"	class	line:14
priority_queue_heap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.h	/^	priority_queue_heap();$/;"	prototype	line:17	class:priority_queue_heap	access:public	signature:()
is_empty	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.h	/^	bool is_empty() const;$/;"	prototype	line:20	class:priority_queue_heap	access:public	signature:() const	returns:bool 
is_full	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.h	/^	bool is_full() const;$/;"	prototype	line:23	class:priority_queue_heap	access:public	signature:() const	returns:bool 
front	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.h	/^   T front();$/;"	prototype	line:27	class:priority_queue_heap	access:public	signature:()	returns:T 
size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.h	/^   int size();$/;"	prototype	line:30	class:priority_queue_heap	access:public	signature:()	returns:int 
dequeue	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.h	/^   T dequeue();$/;"	prototype	line:34	class:priority_queue_heap	access:public	signature:()	returns:T 
enqueue	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.h	/^   void enqueue(const T& value);$/;"	prototype	line:38	class:priority_queue_heap	access:public	signature:(const T& value)	returns:void 
print_queue	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.h	/^   void print_queue();$/;"	prototype	line:40	class:priority_queue_heap	access:public	signature:()	returns:void 
recycle_queue	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.h	/^   void recycle_queue();$/;"	prototype	line:42	class:priority_queue_heap	access:public	signature:()	returns:void 
root	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.h	/^   heap<T> root;$/;"	member	line:45	class:priority_queue_heap	access:private

Rectangle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.cpp	/^Rectangle::Rectangle() {$/;"	function	line:13	class:Rectangle	signature:()	returns:Rectangle :: 
Rectangle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.cpp	/^Rectangle::Rectangle(double w, double h) {$/;"	function	line:21	class:Rectangle	signature:(double w, double h)	returns:Rectangle :: 
getWidth	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.cpp	/^double Rectangle::getWidth() const{$/;"	function	line:29	class:Rectangle	signature:() const	returns:double Rectangle :: 
getHeight	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.cpp	/^double Rectangle::getHeight() const{$/;"	function	line:34	class:Rectangle	signature:() const	returns:double Rectangle :: 
getArea	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.cpp	/^double Rectangle::getArea() {$/;"	function	line:39	class:Rectangle	signature:()	returns:double Rectangle :: 
getPerimeter	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.cpp	/^double Rectangle::getPerimeter() { $/;"	function	line:44	class:Rectangle	signature:()	returns:double Rectangle :: 
printRectangle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.cpp	/^void Rectangle::printRectangle(string obj) {$/;"	function	line:49	class:Rectangle	signature:(string obj)	returns:void Rectangle :: 
~Rectangle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.cpp	/^Rectangle::~Rectangle()$/;"	function	line:63	class:Rectangle	signature:()	returns:Rectangle :: 
search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.template	/^template <class T> binary_tree_node<T> *binary_search_tree<T>::search(const T &key) const { $/;"	function	line:6	class:binary_search_tree	signature:(const T &key) const	returns:template binary_tree_node <T> binary_search_tree <T> :: 
insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.template	/^template <class T> bool binary_search_tree<T>::insert(const T &item) { $/;"	function	line:23	class:binary_search_tree	signature:(const T &item)	returns:template bool binary_search_tree <T> :: 
~binary_search_tree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.template	/^template <class T> binary_search_tree<T>::~binary_search_tree() { $/;"	function	line:52	class:binary_search_tree	signature:()	returns:template binary_search_tree <T> :: 
check_balanced	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.template	/^template <class T> int check_balanced(binary_tree_node<T> *root) { $/;"	function	line:62	signature:(binary_tree_node<T> *root)	returns:template int 
is_balanced	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.template	/^template <class T> int  binary_search_tree<T>::is_balanced() { $/;"	function	line:87	class:binary_search_tree	signature:()	returns:template int binary_search_tree <T> :: 
operator <<	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.template	/^template <class T> std::ostream &operator<<(std::ostream &out, const binary_tree_node<T> *root) { $/;"	function	line:92	signature:(std::ostream &out, const binary_tree_node<T> *root)	returns:template std :: ostream 
operator <<	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.template	/^template <class T> std::ostream &operator<<(std::ostream &out, const binary_search_tree<T> &tree) { $/;"	function	line:106	signature:(std::ostream &out, const binary_search_tree<T> &tree)	returns:template std :: ostream 
bst_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.template	/^template <class Item> bool bst_remove(binary_tree_node<Item>*& root_ptr, const Item& target) { $/;"	function	line:112	signature:(binary_tree_node<Item>*& root_ptr, const Item& target)	returns:template bool 
bst_remove_max	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.template	/^template <class Item> void bst_remove_max(binary_tree_node<Item>*& root_ptr, Item& removed) { $/;"	function	line:139	signature:(binary_tree_node<Item>*& root_ptr, Item& removed)	returns:template void 
remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.template	/^template <class T> bool binary_search_tree<T>::remove(const T &item) { $/;"	function	line:151	class:binary_search_tree	signature:(const T &item)	returns:template bool binary_search_tree <T> :: 
intHeap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^priority_queue_heap<int> intHeap;$/;"	variable	line:16
stringHeap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^priority_queue_heap<string> stringHeap;$/;"	variable	line:17
type	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^int type = 0;$/;"	variable	line:18
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^void printMenu();$/;"	prototype	line:23	signature:()	returns:void 
getInput	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^int getInput();$/;"	prototype	line:28	signature:()	returns:int 
get_line	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^string get_line(string message);$/;"	prototype	line:32	signature:(string message)	returns:string 
enqueueElement	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^void enqueueElement();$/;"	prototype	line:37	signature:()	returns:void 
dequeueElement	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^void dequeueElement();$/;"	prototype	line:40	signature:()	returns:void 
check_is_full	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^bool check_is_full();$/;"	prototype	line:44	signature:()	returns:bool 
check_is_empty	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^bool check_is_empty();$/;"	prototype	line:48	signature:()	returns:bool 
get_queue_size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^int get_queue_size();$/;"	prototype	line:51	signature:()	returns:int 
display_front	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^void display_front();$/;"	prototype	line:54	signature:()	returns:void 
print_queue_elements	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^void print_queue_elements();$/;"	prototype	line:57	signature:()	returns:void 
recycle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^void recycle(); $/;"	prototype	line:60	signature:()	returns:void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^int main() {$/;"	function	line:62	signature:()	returns:int 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^void printMenu() {$/;"	function	line:146	signature:()	returns:void 
getInput	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^int getInput() {$/;"	function	line:162	signature:()	returns:int 
get_line	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^string get_line(string message)$/;"	function	line:177	signature:(string message)	returns:string 
enqueueElement	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^void enqueueElement(){$/;"	function	line:186	signature:()	returns:void 
dequeueElement	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^void dequeueElement(){$/;"	function	line:221	signature:()	returns:void 
check_is_full	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^bool check_is_full(){$/;"	function	line:240	signature:()	returns:bool 
check_is_empty	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^bool check_is_empty(){$/;"	function	line:247	signature:()	returns:bool 
display_front	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^void display_front(){$/;"	function	line:254	signature:()	returns:void 
get_queue_size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^int get_queue_size(){$/;"	function	line:275	signature:()	returns:int 
print_queue_elements	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^void print_queue_elements(){$/;"	function	line:282	signature:()	returns:void 
recycle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\testPQH.cpp	/^void recycle(){$/;"	function	line:290	signature:()	returns:void 
POLY1_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^#define POLY1_H$/;"	macro	line:105
main_savitch_3	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^namespace main_savitch_3$/;"	namespace	line:112
polynomial	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^class polynomial$/;"	class	line:115	namespace:main_savitch_3
polynomial	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    polynomial();$/;"	prototype	line:119	class:main_savitch_3::polynomial	access:public	signature:()
polynomial	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    polynomial(double a0);$/;"	prototype	line:120	class:main_savitch_3::polynomial	access:public	signature:(double a0)
polynomial	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    polynomial(const polynomial& source);$/;"	prototype	line:121	class:main_savitch_3::polynomial	access:public	signature:(const polynomial& source)
~polynomial	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    ~polynomial();$/;"	prototype	line:122	class:main_savitch_3::polynomial	access:public	signature:()
add_to_coef	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    void add_to_coef(double amount, unsigned int k);$/;"	prototype	line:125	class:main_savitch_3::polynomial	access:public	signature:(double amount, unsigned int k)	returns:void 
assign_coef	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    void assign_coef(double coefficient, unsigned int k);$/;"	prototype	line:126	class:main_savitch_3::polynomial	access:public	signature:(double coefficient, unsigned int k)	returns:void 
clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    void clear();$/;"	prototype	line:127	class:main_savitch_3::polynomial	access:public	signature:()	returns:void 
reserve	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    void reserve(size_t number);$/;"	prototype	line:128	class:main_savitch_3::polynomial	access:public	signature:(size_t number)	returns:void 
operator =	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    polynomial& operator=(const polynomial& source);$/;"	prototype	line:131	class:main_savitch_3::polynomial	access:public	signature:(const polynomial& source)	returns:polynomial 
operator =	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    polynomial& operator=(double a0) \/\/ in line function$/;"	function	line:132	class:main_savitch_3::polynomial	access:public	signature:(double a0)	returns:polynomial 
coefficient	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    double coefficient(unsigned int k) const;$/;"	prototype	line:140	class:main_savitch_3::polynomial	access:public	signature:(unsigned int k) const	returns:double 
degree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    unsigned int degree() const;$/;"	prototype	line:141	class:main_savitch_3::polynomial	access:public	signature:() const	returns:unsigned int 
next_term	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    unsigned int next_term(unsigned int k) const;$/;"	prototype	line:142	class:main_savitch_3::polynomial	access:public	signature:(unsigned int k) const	returns:unsigned int 
eval	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    double eval(double x) const;$/;"	prototype	line:145	class:main_savitch_3::polynomial	access:public	signature:(double x) const	returns:double 
operator ()	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    double operator()(double x) const \/\/ in line function$/;"	function	line:146	class:main_savitch_3::polynomial	access:public	signature:(double x) const	returns:double 
coef	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    double* coef;$/;"	member	line:152	class:main_savitch_3::polynomial	access:private
current_array_size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^    size_t current_array_size;$/;"	member	line:153	class:main_savitch_3::polynomial	access:private
operator +	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^polynomial operator+(const polynomial& p1, const polynomial& p2);$/;"	prototype	line:157	namespace:main_savitch_3	signature:(const polynomial& p1, const polynomial& p2)	returns:polynomial 
operator -	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.h	/^polynomial operator-(const polynomial& p1, const polynomial& p2);$/;"	prototype	line:158	namespace:main_savitch_3	signature:(const polynomial& p1, const polynomial& p2)	returns:polynomial 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Vowels\vowels.cpp	/^void printMenu();$/;"	prototype	line:16	signature:()	returns:void 
getInput	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Vowels\vowels.cpp	/^int getInput() {$/;"	function	line:21	signature:()	returns:int 
countVowels	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Vowels\vowels.cpp	/^int countVowels(string input, string vowels);$/;"	prototype	line:41	signature:(string input, string vowels)	returns:int 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Vowels\vowels.cpp	/^int main() {$/;"	function	line:43	signature:()	returns:int 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Vowels\vowels.cpp	/^void printMenu() {$/;"	function	line:76	signature:()	returns:void 
countVowels	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A5_Vowels\vowels.cpp	/^int countVowels(string input, string vowels) {$/;"	function	line:88	signature:(string input, string vowels)	returns:int 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\TestRectangle.cpp	/^int main() {$/;"	function	line:13	signature:()	returns:int 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void printMenu();$/;"	prototype	line:14	signature:()	returns:void 
getInput	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^int getInput();$/;"	prototype	line:16	signature:()	returns:int 
getSize	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^int getSize();$/;"	prototype	line:18	signature:()	returns:int 
getMatrix	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void getMatrix(int matrix[5][5], int size);$/;"	prototype	line:20	signature:(int matrix[5][5], int size)	returns:void 
printMatrix	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void printMatrix(int matrix[5][5], int size);$/;"	prototype	line:22	signature:(int matrix[5][5], int size)	returns:void 
calcReachMatrix	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void calcReachMatrix(int matrixN[5][5], int matrix1[5][5], int matrix2[5][5], int size);$/;"	prototype	line:24	signature:(int matrixN[5][5], int matrix1[5][5], int matrix2[5][5], int size)	returns:void 
reachabilityMatrix	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void reachabilityMatrix(int reachMatrix[5][5], int A1[5][5], int A2[5][5], int A3[5][5], int A4[5][5], int A5[5][5], int size);$/;"	prototype	line:26	signature:(int reachMatrix[5][5], int A1[5][5], int A2[5][5], int A3[5][5], int A4[5][5], int A5[5][5], int size)	returns:void 
inDegree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void inDegree(int matrix[5][5], int size);$/;"	prototype	line:28	signature:(int matrix[5][5], int size)	returns:void 
outDegree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void outDegree(int matrix[5][5], int size);$/;"	prototype	line:30	signature:(int matrix[5][5], int size)	returns:void 
loops	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void loops(int matrix[5][5], int size);$/;"	prototype	line:32	signature:(int matrix[5][5], int size)	returns:void 
cycles	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void cycles(int matrix[5][5], int size);$/;"	prototype	line:34	signature:(int matrix[5][5], int size)	returns:void 
pathsOneEdge	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void pathsOneEdge(int matrix[5][5], int size);$/;"	prototype	line:36	signature:(int matrix[5][5], int size)	returns:void 
pathsNEdge	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void pathsNEdge(int matrix[5][5], int size);$/;"	prototype	line:38	signature:(int matrix[5][5], int size)	returns:void 
pathsOneToN	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void pathsOneToN(int matrix[5][5], int size);$/;"	prototype	line:40	signature:(int matrix[5][5], int size)	returns:void 
cyclesOneToN	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void cyclesOneToN(int matrix[5][5], int size);$/;"	prototype	line:42	signature:(int matrix[5][5], int size)	returns:void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^int main() {$/;"	function	line:45	signature:()	returns:int 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void printMenu() {$/;"	function	line:155	signature:()	returns:void 
getInput	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^int getInput() {$/;"	function	line:164	signature:()	returns:int 
getSize	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^int getSize() {$/;"	function	line:179	signature:()	returns:int 
getMatrix	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void getMatrix(int matrix[5][5], int size){$/;"	function	line:192	signature:(int matrix[5][5], int size)	returns:void 
printMatrix	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void printMatrix(int matrix[5][5], int size) {$/;"	function	line:204	signature:(int matrix[5][5], int size)	returns:void 
calcReachMatrix	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void calcReachMatrix(int matrixN[5][5], int matrix1[5][5], int matrix2[5][5], int size) {$/;"	function	line:215	signature:(int matrixN[5][5], int matrix1[5][5], int matrix2[5][5], int size)	returns:void 
reachabilityMatrix	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void reachabilityMatrix(int reachMatrix[5][5], int A1[5][5], int A2[5][5], int A3[5][5], int A4[5][5], int A5[5][5], int size) {	$/;"	function	line:230	signature:(int reachMatrix[5][5], int A1[5][5], int A2[5][5], int A3[5][5], int A4[5][5], int A5[5][5], int size)	returns:void 
inDegree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void inDegree(int matrix[5][5], int size) {$/;"	function	line:241	signature:(int matrix[5][5], int size)	returns:void 
outDegree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void outDegree(int matrix[5][5], int size) {$/;"	function	line:253	signature:(int matrix[5][5], int size)	returns:void 
loops	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void loops(int matrix[5][5], int size) {$/;"	function	line:265	signature:(int matrix[5][5], int size)	returns:void 
cycles	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void cycles(int matrix[5][5], int size) {$/;"	function	line:277	signature:(int matrix[5][5], int size)	returns:void 
pathsOneEdge	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void pathsOneEdge(int matrix[5][5], int size) {$/;"	function	line:289	signature:(int matrix[5][5], int size)	returns:void 
pathsNEdge	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void pathsNEdge(int matrix[5][5], int size) {$/;"	function	line:301	signature:(int matrix[5][5], int size)	returns:void 
pathsOneToN	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void pathsOneToN(int matrix[5][5], int size) {$/;"	function	line:313	signature:(int matrix[5][5], int size)	returns:void 
cyclesOneToN	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A9_Graphs\Reachability_Matrix.cpp	/^void cyclesOneToN(int matrix[5][5], int size) {$/;"	function	line:325	signature:(int matrix[5][5], int size)	returns:void 
main_savitch_5	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.cpp	/^namespace main_savitch_5 {$/;"	namespace	line:19
list_length	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.cpp	/^    size_t list_length(const node* head_ptr) {$/;"	function	line:21	namespace:main_savitch_5	signature:(const node* head_ptr)	returns:size_t 
list_head_insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.cpp	/^    void list_head_insert(node*& head_ptr, const node::value_type& entry) {$/;"	function	line:33	namespace:main_savitch_5	signature:(node*& head_ptr, const node::value_type& entry)	returns:void 
list_insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.cpp	/^    void list_insert(node* previous_ptr, const node::value_type& entry) {$/;"	function	line:37	namespace:main_savitch_5	signature:(node* previous_ptr, const node::value_type& entry)	returns:void 
list_search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.cpp	/^    node* list_search(node* head_ptr, const node::value_type& target) {$/;"	function	line:44	namespace:main_savitch_5	signature:(node* head_ptr, const node::value_type& target)	returns:node 
list_search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.cpp	/^    const node* list_search(const node* head_ptr, const node::value_type& target) {$/;"	function	line:54	namespace:main_savitch_5	signature:(const node* head_ptr, const node::value_type& target)	returns:const node 
list_locate	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.cpp	/^    node* list_locate(node* head_ptr, size_t position) {$/;"	function	line:64	namespace:main_savitch_5	signature:(node* head_ptr, size_t position)	returns:node 
list_locate	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.cpp	/^    const node* list_locate(const node* head_ptr, size_t position) {$/;"	function	line:76	namespace:main_savitch_5	signature:(const node* head_ptr, size_t position)	returns:const node 
list_head_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.cpp	/^    void list_head_remove(node*& head_ptr) {$/;"	function	line:89	namespace:main_savitch_5	signature:(node*& head_ptr)	returns:void 
list_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.cpp	/^    void list_remove(node* previous_ptr) {$/;"	function	line:97	namespace:main_savitch_5	signature:(node* previous_ptr)	returns:void 
list_clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.cpp	/^    void list_clear(node*& head_ptr) {$/;"	function	line:105	namespace:main_savitch_5	signature:(node*& head_ptr)	returns:void 
list_copy	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.cpp	/^    void list_copy(const node* source_ptr, node*& head_ptr, node*& tail_ptr) {$/;"	function	line:112	namespace:main_savitch_5	signature:(const node* source_ptr, node*& head_ptr, node*& tail_ptr)	returns:void 
rnd	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\testBST.cpp	/^int rnd() {$/;"	function	line:7	signature:()	returns:int 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\testBST.cpp	/^int main() {$/;"	function	line:11	signature:()	returns:int 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New_Test.cpp	/^void printMenu();$/;"	prototype	line:17	signature:()	returns:void 
getIndex	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New_Test.cpp	/^int getIndex();$/;"	prototype	line:18	signature:()	returns:int 
display	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New_Test.cpp	/^void display(node* grade_ptr); $/;"	prototype	line:19	signature:(node* grade_ptr)	returns:void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New_Test.cpp	/^int main() {$/;"	function	line:21	signature:()	returns:int 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New_Test.cpp	/^void printMenu(){$/;"	function	line:200	signature:()	returns:void 
getIndex	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New_Test.cpp	/^int getIndex(){ $/;"	function	line:224	signature:()	returns:int 
display	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New_Test.cpp	/^void display(node* grade_ptr) {$/;"	function	line:238	signature:(node* grade_ptr)	returns:void 
MANY	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^const unsigned int MANY = 3; \/\/ Number of polynomials allowed in this test program.$/;"	variable	line:27
print_menu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void print_menu();$/;"	prototype	line:30	signature:()	returns:void 
set_current	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^size_t set_current();$/;"	prototype	line:33	signature:()	returns:size_t 
get_command	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^char get_command();$/;"	prototype	line:36	signature:()	returns:char 
view_degree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void view_degree(const polynomial& test);$/;"	prototype	line:40	signature:(const polynomial& test)	returns:void 
view_poly	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void view_poly(const polynomial& test);$/;"	prototype	line:43	signature:(const polynomial& test)	returns:void 
view_all	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void view_all(const polynomial a[]);$/;"	prototype	line:46	signature:(const polynomial a[])	returns:void 
test_add	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void test_add(polynomial& test);$/;"	prototype	line:49	signature:(polynomial& test)	returns:void 
test_assign	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void test_assign(polynomial& test);$/;"	prototype	line:53	signature:(polynomial& test)	returns:void 
test_clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void test_clear(polynomial& test);$/;"	prototype	line:57	signature:(polynomial& test)	returns:void 
test_eval	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void test_eval(const polynomial& test);$/;"	prototype	line:61	signature:(const polynomial& test)	returns:void 
test_next	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void test_next(const polynomial& test);$/;"	prototype	line:65	signature:(const polynomial& test)	returns:void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^int main()$/;"	function	line:69	signature:()	returns:int 
print_menu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void print_menu()$/;"	function	line:132	signature:()	returns:void 
get_command	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^char get_command()$/;"	function	line:152	signature:()	returns:char 
view_poly	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void view_poly(const polynomial& test)$/;"	function	line:162	signature:(const polynomial& test)	returns:void 
view_degree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void view_degree(const polynomial& test)$/;"	function	line:167	signature:(const polynomial& test)	returns:void 
set_current	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^size_t set_current()$/;"	function	line:173	signature:()	returns:size_t 
test_add	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void test_add(polynomial& test)$/;"	function	line:189	signature:(polynomial& test)	returns:void 
test_assign	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void test_assign(polynomial& test)$/;"	function	line:204	signature:(polynomial& test)	returns:void 
test_eval	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void test_eval(const polynomial& test)$/;"	function	line:219	signature:(const polynomial& test)	returns:void 
view_all	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void view_all(const polynomial p[])$/;"	function	line:230	signature:(const polynomial p[])	returns:void 
test_clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void test_clear(polynomial& test)$/;"	function	line:242	signature:(polynomial& test)	returns:void 
test_next	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\polytest1.cpp	/^void test_next(const polynomial& test)$/;"	function	line:249	signature:(const polynomial& test)	returns:void 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void printMenu();$/;"	prototype	line:16	signature:()	returns:void 
getInput	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^int getInput();$/;"	prototype	line:18	signature:()	returns:int 
fillTable	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void fillTable(int table[][2]);$/;"	prototype	line:20	signature:(int table[][2])	returns:void 
printTable	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void printTable(int table[][2]);$/;"	prototype	line:22	signature:(int table[][2])	returns:void 
sumProbes	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void sumProbes(int table[][2]);$/;"	prototype	line:24	signature:(int table[][2])	returns:void 
hf1	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void hf1(int table[][2], int keys[]);$/;"	prototype	line:26	signature:(int table[][2], int keys[])	returns:void 
hf2	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void hf2(int table[][2], int keys[]);$/;"	prototype	line:28	signature:(int table[][2], int keys[])	returns:void 
hf3	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void hf3(int table[][2], int keys[]);$/;"	prototype	line:30	signature:(int table[][2], int keys[])	returns:void 
h2	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^int h2(int key);$/;"	prototype	line:32	signature:(int key)	returns:int 
hf4	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void hf4(int table[][2], int keys[]);$/;"	prototype	line:34	signature:(int table[][2], int keys[])	returns:void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^int main() {$/;"	function	line:36	signature:()	returns:int 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void printMenu() {$/;"	function	line:81	signature:()	returns:void 
getInput	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^int getInput() {$/;"	function	line:93	signature:()	returns:int 
fillTable	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void fillTable(int table[][2]) {$/;"	function	line:107	signature:(int table[][2])	returns:void 
printTable	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void printTable(int table[][2]) {$/;"	function	line:114	signature:(int table[][2])	returns:void 
sumProbes	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void sumProbes(int table[][2]) {$/;"	function	line:122	signature:(int table[][2])	returns:void 
hf1	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void hf1(int table[][2], int keys[]) {$/;"	function	line:130	signature:(int table[][2], int keys[])	returns:void 
hf2	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void hf2(int table[][2], int keys[]) {$/;"	function	line:157	signature:(int table[][2], int keys[])	returns:void 
hf3	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void hf3(int table[][2], int keys[]) {$/;"	function	line:183	signature:(int table[][2], int keys[])	returns:void 
h2	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^int h2(int key) {$/;"	function	line:213	signature:(int key)	returns:int 
hf4	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A8_Hash_Tables\hashFunctions.cpp	/^void hf4(int table[][2], int keys[]) {$/;"	function	line:217	signature:(int table[][2], int keys[])	returns:void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\TestThinkingCap.cpp	/^int main() {$/;"	function	line:7	signature:()	returns:int 
Thinking_Cap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.cpp	/^Thinking_Cap::Thinking_Cap() {$/;"	function	line:5	class:Thinking_Cap	signature:()	returns:Thinking_Cap :: 
Read_Green	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.cpp	/^Thinking_Cap::Read_Green(string g) {$/;"	function	line:9	class:Thinking_Cap	signature:(string g)	returns:Thinking_Cap :: 
Read_Red	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.cpp	/^Thinking_Cap::Read_Red(string r) {$/;"	function	line:14	class:Thinking_Cap	signature:(string r)	returns:Thinking_Cap :: 
set_green	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.cpp	/^Thinking_Cap::set_green(string g) {$/;"	function	line:19	class:Thinking_Cap	signature:(string g)	returns:Thinking_Cap :: 
set_red	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.cpp	/^Thinking_Cap::set_red(string r) {$/;"	function	line:24	class:Thinking_Cap	signature:(string r)	returns:Thinking_Cap :: 
~Thinking_Cap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.cpp	/^Thinking_Cap::~Thinking_Cap()$/;"	function	line:29	class:Thinking_Cap	signature:()	returns:Thinking_Cap :: 
BST_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^#define BST_H$/;"	macro	line:2
binary_search_tree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^template <class T> class binary_search_tree { $/;"	class	line:9
binary_search_tree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^    binary_search_tree() {$/;"	function	line:12	class:binary_search_tree	access:public	signature:()
search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^    binary_tree_node<T> *search(const T &key) const;$/;"	prototype	line:21	class:binary_search_tree	access:public	signature:(const T &key) const	returns:binary_tree_node <T> 
insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^    bool insert(const T &item);$/;"	prototype	line:29	class:binary_search_tree	access:public	signature:(const T &item)	returns:bool 
remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^    bool remove(const T &item);$/;"	prototype	line:37	class:binary_search_tree	access:public	signature:(const T &item)	returns:bool 
~binary_search_tree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^    ~binary_search_tree();$/;"	prototype	line:41	class:binary_search_tree	access:public	signature:()
is_balanced	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^    int is_balanced();$/;"	prototype	line:48	class:binary_search_tree	access:public	signature:()	returns:int 
operator <<	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^    template <class S>     friend std::ostream &operator<<(std::ostream &out, const binary_search_tree<S> &tree); $/;"	prototype	line:51	class:binary_search_tree	access:friend	signature:(std::ostream &out, const binary_search_tree<S> &tree)	returns:template friend std :: ostream 
get_root	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^    binary_tree_node<T> *get_root() { return root; }$/;"	function	line:53	class:binary_search_tree	access:public	signature:()	returns:binary_tree_node <T> 
root	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^    binary_tree_node<T> *root;$/;"	member	line:57	class:binary_search_tree	access:private
operator <<	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^template <class T> std::ostream &operator<<(std::ostream &out, const binary_tree_node<T> *root); $/;"	prototype	line:62	signature:(std::ostream &out, const binary_tree_node<T> *root)	returns:template std :: ostream 
check_balanced	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^template <class T> int check_balanced(binary_tree_node<T> *root); $/;"	prototype	line:69	signature:(binary_tree_node<T> *root)	returns:template int 
bst_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^template <class Item> bool bst_remove( $/;"	prototype	line:73	signature:( binary_tree_node<Item>*& root_ptr, const Item& target )	returns:template bool 
bst_remove_max	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bst.h	/^template <class Item> void bst_remove_max( $/;"	prototype	line:85	signature:( binary_tree_node<Item>*& root_ptr, Item& removed )	returns:template void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Queues\Queues.cpp	/^int main() {$/;"	function	line:9	signature:()	returns:int 
inorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.template	/^    template<class Process, class BTNode>     void inorder(Process f, BTNode *node_ptr) $/;"	function	line:10	signature:(Process f, BTNode *node_ptr)	returns:template void 
postorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.template	/^    template<class Process, class BTNode>     void postorder(Process f, BTNode *node_ptr) $/;"	function	line:21	signature:(Process f, BTNode *node_ptr)	returns:template void 
preorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.template	/^    template<class Process, class BTNode>     void preorder(Process f, BTNode *node_ptr) $/;"	function	line:32	signature:(Process f, BTNode *node_ptr)	returns:template void 
print	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.template	/^    template<class Item, class SizeType>     void print(binary_tree_node <Item> *node_ptr, SizeType depth) $/;"	function	line:43	signature:(binary_tree_node <Item> *node_ptr, SizeType depth)	returns:template void 
tree_clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.template	/^    template<class Item>     void tree_clear(binary_tree_node <Item> *&root_ptr) $/;"	function	line:55	signature:(binary_tree_node <Item> *&root_ptr)	returns:template void 
tree_copy	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.template	/^    template<class Item>     binary_tree_node <Item> *tree_copy(const binary_tree_node <Item> *root_ptr) $/;"	function	line:70	signature:(const binary_tree_node <Item> *root_ptr)	returns:template binary_tree_node <Item> 
tree_size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.template	/^    template<class Item>     size_t tree_size(const binary_tree_node <Item> *node_ptr) $/;"	function	line:87	signature:(const binary_tree_node <Item> *node_ptr)	returns:template size_t 
BST_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^#define BST_H$/;"	macro	line:2
binary_search_tree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^template <class T> class binary_search_tree { $/;"	class	line:9
binary_search_tree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^    binary_search_tree() {$/;"	function	line:12	class:binary_search_tree	access:public	signature:()
search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^    binary_tree_node<T> *search(const T &key) const;$/;"	prototype	line:21	class:binary_search_tree	access:public	signature:(const T &key) const	returns:binary_tree_node <T> 
insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^    bool insert(const T &item);$/;"	prototype	line:29	class:binary_search_tree	access:public	signature:(const T &item)	returns:bool 
remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^    bool remove(const T &item);$/;"	prototype	line:37	class:binary_search_tree	access:public	signature:(const T &item)	returns:bool 
~binary_search_tree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^    ~binary_search_tree();$/;"	prototype	line:41	class:binary_search_tree	access:public	signature:()
is_balanced	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^    int is_balanced();$/;"	prototype	line:48	class:binary_search_tree	access:public	signature:()	returns:int 
operator <<	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^    template <class S>     friend std::ostream &operator<<(std::ostream &out, const binary_search_tree<S> &tree); $/;"	prototype	line:51	class:binary_search_tree	access:friend	signature:(std::ostream &out, const binary_search_tree<S> &tree)	returns:template friend std :: ostream 
get_root	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^    binary_tree_node<T> *get_root() { return root; }$/;"	function	line:53	class:binary_search_tree	access:public	signature:()	returns:binary_tree_node <T> 
root	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^    binary_tree_node<T> *root;$/;"	member	line:57	class:binary_search_tree	access:private
operator <<	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^template <class T> std::ostream &operator<<(std::ostream &out, const binary_tree_node<T> *root); $/;"	prototype	line:62	signature:(std::ostream &out, const binary_tree_node<T> *root)	returns:template std :: ostream 
check_balanced	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^template <class T> int check_balanced(binary_tree_node<T> *root); $/;"	prototype	line:69	signature:(binary_tree_node<T> *root)	returns:template int 
bst_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^template <class Item> bool bst_remove( $/;"	prototype	line:73	signature:( binary_tree_node<Item>*& root_ptr, const Item& target )	returns:template bool 
bst_remove_max	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bst.h	/^template <class Item> void bst_remove_max( $/;"	prototype	line:85	signature:( binary_tree_node<Item>*& root_ptr, Item& removed )	returns:template void 
inorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.template	/^    template<class Process, class BTNode>     void inorder(Process f, BTNode *node_ptr) $/;"	function	line:10	signature:(Process f, BTNode *node_ptr)	returns:template void 
postorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.template	/^    template<class Process, class BTNode>     void postorder(Process f, BTNode *node_ptr) $/;"	function	line:21	signature:(Process f, BTNode *node_ptr)	returns:template void 
preorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.template	/^    template<class Process, class BTNode>     void preorder(Process f, BTNode *node_ptr) $/;"	function	line:32	signature:(Process f, BTNode *node_ptr)	returns:template void 
print	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.template	/^    template<class Item, class SizeType>     void print(binary_tree_node <Item> *node_ptr, SizeType depth) $/;"	function	line:43	signature:(binary_tree_node <Item> *node_ptr, SizeType depth)	returns:template void 
tree_clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.template	/^    template<class Item>     void tree_clear(binary_tree_node <Item> *&root_ptr) $/;"	function	line:55	signature:(binary_tree_node <Item> *&root_ptr)	returns:template void 
tree_copy	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.template	/^    template<class Item>     binary_tree_node <Item> *tree_copy(const binary_tree_node <Item> *root_ptr) $/;"	function	line:70	signature:(const binary_tree_node <Item> *root_ptr)	returns:template binary_tree_node <Item> 
tree_size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.template	/^    template<class Item>     size_t tree_size(const binary_tree_node <Item> *node_ptr) $/;"	function	line:87	signature:(const binary_tree_node <Item> *node_ptr)	returns:template size_t 
polynomial	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.cpp	/^poly1::polynomial() {$/;"	function	line:15	class:poly1	signature:()	returns:poly1 :: 
polynomial	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.cpp	/^poly1::polynomial(doule a0) {$/;"	function	line:19	class:poly1	signature:(doule a0)	returns:poly1 :: 
polynomial	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.cpp	/^poly1::polynomial(const polynomial& source) {$/;"	function	line:23	class:poly1	signature:(const polynomial& source)	returns:poly1 :: 
~polynomial	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A2_Polynomial\poly1.cpp	/^poly1::~polynomial(){$/;"	function	line:27	class:poly1	signature:()	returns:poly1 :: 
BINTREE_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^#define BINTREE_H$/;"	macro	line:103
binary_tree_node	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^    template <class Item>     class binary_tree_node $/;"	class	line:108
value_type	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	typedef Item value_type; $/;"	typedef	line:112	class:binary_tree_node	access:public
binary_tree_node	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	binary_tree_node($/;"	function	line:114	class:binary_tree_node	access:public	signature:( const Item& init_data = Item( ), binary_tree_node* init_left = NULL, binary_tree_node* init_right = NULL )
data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	Item& data( ) { return data_field; }$/;"	function	line:125	class:binary_tree_node	access:public	signature:( )	returns:Item 
left	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	binary_tree_node* &left( ) { return left_field; }$/;"	function	line:126	class:binary_tree_node	access:public	signature:( )	returns:binary_tree_node 
right	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	binary_tree_node* &right( ) { return right_field; }$/;"	function	line:127	class:binary_tree_node	access:public	signature:( )	returns:binary_tree_node 
set_data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	void set_data(const Item& new_data) { data_field = new_data; }$/;"	function	line:128	class:binary_tree_node	access:public	signature:(const Item& new_data)	returns:void 
set_left	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	void set_left(binary_tree_node* new_left) { left_field = new_left; }$/;"	function	line:129	class:binary_tree_node	access:public	signature:(binary_tree_node* new_left)	returns:void 
set_right	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	void set_right(binary_tree_node* new_right) { right_field = new_right; }$/;"	function	line:130	class:binary_tree_node	access:public	signature:(binary_tree_node* new_right)	returns:void 
data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	const Item& data( ) const { return data_field; }$/;"	function	line:132	class:binary_tree_node	access:public	signature:( ) const	returns:const Item 
left	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	const binary_tree_node* left( ) const { return left_field; }$/;"	function	line:133	class:binary_tree_node	access:public	signature:( ) const	returns:const binary_tree_node 
right	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	const binary_tree_node* right( ) const { return right_field; }$/;"	function	line:134	class:binary_tree_node	access:public	signature:( ) const	returns:const binary_tree_node 
is_leaf	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	bool is_leaf( ) const$/;"	function	line:135	class:binary_tree_node	access:public	signature:( ) const	returns:bool 
data_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	Item data_field;$/;"	member	line:138	class:binary_tree_node	access:private
left_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	binary_tree_node *left_field;$/;"	member	line:139	class:binary_tree_node	access:private
right_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^	binary_tree_node *right_field;$/;"	member	line:140	class:binary_tree_node	access:private
inorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^    template <class Process, class BTNode>     void inorder(Process f, BTNode* node_ptr);  $/;"	prototype	line:145	signature:(Process f, BTNode* node_ptr)	returns:template void 
preorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^    template <class Process, class BTNode>     void preorder(Process f, BTNode* node_ptr); $/;"	prototype	line:148	signature:(Process f, BTNode* node_ptr)	returns:template void 
postorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^    template <class Process, class BTNode>     void postorder(Process f, BTNode* node_ptr);  $/;"	prototype	line:151	signature:(Process f, BTNode* node_ptr)	returns:template void 
print	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^    template <class Item, class SizeType>     void print(binary_tree_node<Item>* node_ptr, SizeType depth); $/;"	prototype	line:154	signature:(binary_tree_node<Item>* node_ptr, SizeType depth)	returns:template void 
tree_clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^    template <class Item>     void tree_clear(binary_tree_node<Item>*& root_ptr); $/;"	prototype	line:157	signature:(binary_tree_node<Item>*& root_ptr)	returns:template void 
tree_copy	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^    template <class Item>     binary_tree_node<Item>* tree_copy(const binary_tree_node<Item>* root_ptr); $/;"	prototype	line:160	signature:(const binary_tree_node<Item>* root_ptr)	returns:template binary_tree_node <Item> 
tree_size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\bintree.h	/^    template <class Item>     std::size_t tree_size(const binary_tree_node<Item>* node_ptr); $/;"	prototype	line:163	signature:(const binary_tree_node<Item>* node_ptr)	returns:template std :: size_t 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1_Test.cpp	/^void printMenu();$/;"	prototype	line:17	signature:()	returns:void 
getIndex	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1_Test.cpp	/^int getIndex();$/;"	prototype	line:18	signature:()	returns:int 
display	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1_Test.cpp	/^void display(node* grade_ptr); $/;"	prototype	line:19	signature:(node* grade_ptr)	returns:void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1_Test.cpp	/^int main() {$/;"	function	line:21	signature:()	returns:int 
printMenu	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1_Test.cpp	/^void printMenu(){$/;"	function	line:178	signature:()	returns:void 
getIndex	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1_Test.cpp	/^int getIndex(){ $/;"	function	line:199	signature:()	returns:int 
display	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1_Test.cpp	/^void display(node* grade_ptr) {$/;"	function	line:213	signature:(node* grade_ptr)	returns:void 
BINTREE_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^#define BINTREE_H$/;"	macro	line:103
binary_tree_node	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^    template <class Item>     class binary_tree_node $/;"	class	line:108
value_type	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	typedef Item value_type; $/;"	typedef	line:112	class:binary_tree_node	access:public
binary_tree_node	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	binary_tree_node($/;"	function	line:114	class:binary_tree_node	access:public	signature:( const Item& init_data = Item( ), binary_tree_node* init_left = NULL, binary_tree_node* init_right = NULL )
data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	Item& data( ) { return data_field; }$/;"	function	line:125	class:binary_tree_node	access:public	signature:( )	returns:Item 
left	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	binary_tree_node* &left( ) { return left_field; }$/;"	function	line:126	class:binary_tree_node	access:public	signature:( )	returns:binary_tree_node 
right	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	binary_tree_node* &right( ) { return right_field; }$/;"	function	line:127	class:binary_tree_node	access:public	signature:( )	returns:binary_tree_node 
set_data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	void set_data(const Item& new_data) { data_field = new_data; }$/;"	function	line:128	class:binary_tree_node	access:public	signature:(const Item& new_data)	returns:void 
set_left	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	void set_left(binary_tree_node* new_left) { left_field = new_left; }$/;"	function	line:129	class:binary_tree_node	access:public	signature:(binary_tree_node* new_left)	returns:void 
set_right	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	void set_right(binary_tree_node* new_right) { right_field = new_right; }$/;"	function	line:130	class:binary_tree_node	access:public	signature:(binary_tree_node* new_right)	returns:void 
data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	const Item& data( ) const { return data_field; }$/;"	function	line:132	class:binary_tree_node	access:public	signature:( ) const	returns:const Item 
left	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	const binary_tree_node* left( ) const { return left_field; }$/;"	function	line:133	class:binary_tree_node	access:public	signature:( ) const	returns:const binary_tree_node 
right	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	const binary_tree_node* right( ) const { return right_field; }$/;"	function	line:134	class:binary_tree_node	access:public	signature:( ) const	returns:const binary_tree_node 
is_leaf	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	bool is_leaf( ) const$/;"	function	line:135	class:binary_tree_node	access:public	signature:( ) const	returns:bool 
data_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	Item data_field;$/;"	member	line:138	class:binary_tree_node	access:private
left_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	binary_tree_node *left_field;$/;"	member	line:139	class:binary_tree_node	access:private
right_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^	binary_tree_node *right_field;$/;"	member	line:140	class:binary_tree_node	access:private
inorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^    template <class Process, class BTNode>     void inorder(Process f, BTNode* node_ptr);  $/;"	prototype	line:145	signature:(Process f, BTNode* node_ptr)	returns:template void 
preorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^    template <class Process, class BTNode>     void preorder(Process f, BTNode* node_ptr); $/;"	prototype	line:148	signature:(Process f, BTNode* node_ptr)	returns:template void 
postorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^    template <class Process, class BTNode>     void postorder(Process f, BTNode* node_ptr);  $/;"	prototype	line:151	signature:(Process f, BTNode* node_ptr)	returns:template void 
print	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^    template <class Item, class SizeType>     void print(binary_tree_node<Item>* node_ptr, SizeType depth); $/;"	prototype	line:154	signature:(binary_tree_node<Item>* node_ptr, SizeType depth)	returns:template void 
tree_clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^    template <class Item>     void tree_clear(binary_tree_node<Item>*& root_ptr); $/;"	prototype	line:157	signature:(binary_tree_node<Item>*& root_ptr)	returns:template void 
tree_copy	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^    template <class Item>     binary_tree_node<Item>* tree_copy(const binary_tree_node<Item>* root_ptr); $/;"	prototype	line:160	signature:(const binary_tree_node<Item>* root_ptr)	returns:template binary_tree_node <Item> 
tree_size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\bintree.h	/^    template <class Item>     std::size_t tree_size(const binary_tree_node<Item>* node_ptr); $/;"	prototype	line:163	signature:(const binary_tree_node<Item>* node_ptr)	returns:template std :: size_t 
printWord	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\removeDuplicates.cpp	/^void printWord(string word);$/;"	prototype	line:16	signature:(string word)	returns:void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\removeDuplicates.cpp	/^int main() {$/;"	function	line:18	signature:()	returns:int 
printWord	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_remDupes\removeDuplicates.cpp	/^void printWord(string word) {$/;"	function	line:58	signature:(string word)	returns:void 
RECTANGLE_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^#define RECTANGLE_H$/;"	macro	line:8
Rectangle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^class Rectangle {$/;"	class	line:13
Rectangle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^	Rectangle(); \/\/ Constructor$/;"	prototype	line:16	class:Rectangle	access:public	signature:()
Rectangle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^	Rectangle(double width, double height); \/\/ Constructor with user defined dimensions $/;"	prototype	line:17	class:Rectangle	access:public	signature:(double width, double height)
printRectangle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^	void printRectangle(string objectName); \/\/ Prints the stats$/;"	prototype	line:18	class:Rectangle	access:public	signature:(string objectName)	returns:void 
getWidth	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^	double getWidth() const;$/;"	prototype	line:19	class:Rectangle	access:public	signature:() const	returns:double 
getHeight	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^	double getHeight() const;$/;"	prototype	line:20	class:Rectangle	access:public	signature:() const	returns:double 
~Rectangle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^	~Rectangle();$/;"	prototype	line:21	class:Rectangle	access:public	signature:()
getArea	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^	double getArea(); \/\/ Calculates the area of the rectangle$/;"	prototype	line:23	class:Rectangle	access:private	signature:()	returns:double 
getPerimeter	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^	double getPerimeter(); \/\/ Calculates the perimeter of the rectangle$/;"	prototype	line:24	class:Rectangle	access:private	signature:()	returns:double 
width	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^	double width = 1.00;$/;"	member	line:26	class:Rectangle	access:private
height	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^	double height = 1.00;$/;"	member	line:27	class:Rectangle	access:private
area	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^	double area = 0;$/;"	member	line:28	class:Rectangle	access:private
perimeter	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise1\Rectangle.h	/^	double perimeter = 0;$/;"	member	line:29	class:Rectangle	access:private
BINTREE_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^#define BINTREE_H$/;"	macro	line:103
binary_tree_node	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^    template <class Item>     class binary_tree_node $/;"	class	line:108
value_type	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	typedef Item value_type; $/;"	typedef	line:112	class:binary_tree_node	access:public
binary_tree_node	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	binary_tree_node($/;"	function	line:114	class:binary_tree_node	access:public	signature:( const Item& init_data = Item( ), binary_tree_node* init_left = NULL, binary_tree_node* init_right = NULL )
data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	Item& data( ) { return data_field; }$/;"	function	line:125	class:binary_tree_node	access:public	signature:( )	returns:Item 
left	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	binary_tree_node* &left( ) { return left_field; }$/;"	function	line:126	class:binary_tree_node	access:public	signature:( )	returns:binary_tree_node 
right	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	binary_tree_node* &right( ) { return right_field; }$/;"	function	line:127	class:binary_tree_node	access:public	signature:( )	returns:binary_tree_node 
set_data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	void set_data(const Item& new_data) { data_field = new_data; }$/;"	function	line:128	class:binary_tree_node	access:public	signature:(const Item& new_data)	returns:void 
set_left	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	void set_left(binary_tree_node* new_left) { left_field = new_left; }$/;"	function	line:129	class:binary_tree_node	access:public	signature:(binary_tree_node* new_left)	returns:void 
set_right	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	void set_right(binary_tree_node* new_right) { right_field = new_right; }$/;"	function	line:130	class:binary_tree_node	access:public	signature:(binary_tree_node* new_right)	returns:void 
data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	const Item& data( ) const { return data_field; }$/;"	function	line:132	class:binary_tree_node	access:public	signature:( ) const	returns:const Item 
left	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	const binary_tree_node* left( ) const { return left_field; }$/;"	function	line:133	class:binary_tree_node	access:public	signature:( ) const	returns:const binary_tree_node 
right	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	const binary_tree_node* right( ) const { return right_field; }$/;"	function	line:134	class:binary_tree_node	access:public	signature:( ) const	returns:const binary_tree_node 
is_leaf	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	bool is_leaf( ) const$/;"	function	line:135	class:binary_tree_node	access:public	signature:( ) const	returns:bool 
data_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	Item data_field;$/;"	member	line:138	class:binary_tree_node	access:private
left_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	binary_tree_node *left_field;$/;"	member	line:139	class:binary_tree_node	access:private
right_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^	binary_tree_node *right_field;$/;"	member	line:140	class:binary_tree_node	access:private
inorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^    template <class Process, class BTNode>     void inorder(Process f, BTNode* node_ptr);  $/;"	prototype	line:145	signature:(Process f, BTNode* node_ptr)	returns:template void 
preorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^    template <class Process, class BTNode>     void preorder(Process f, BTNode* node_ptr); $/;"	prototype	line:148	signature:(Process f, BTNode* node_ptr)	returns:template void 
postorder	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^    template <class Process, class BTNode>     void postorder(Process f, BTNode* node_ptr);  $/;"	prototype	line:151	signature:(Process f, BTNode* node_ptr)	returns:template void 
print	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^    template <class Item, class SizeType>     void print(binary_tree_node<Item>* node_ptr, SizeType depth); $/;"	prototype	line:154	signature:(binary_tree_node<Item>* node_ptr, SizeType depth)	returns:template void 
tree_clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^    template <class Item>     void tree_clear(binary_tree_node<Item>*& root_ptr); $/;"	prototype	line:157	signature:(binary_tree_node<Item>*& root_ptr)	returns:template void 
tree_copy	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^    template <class Item>     binary_tree_node<Item>* tree_copy(const binary_tree_node<Item>* root_ptr); $/;"	prototype	line:160	signature:(const binary_tree_node<Item>* root_ptr)	returns:template binary_tree_node <Item> 
tree_size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bintree.h	/^    template <class Item>     std::size_t tree_size(const binary_tree_node<Item>* node_ptr); $/;"	prototype	line:163	signature:(const binary_tree_node<Item>* node_ptr)	returns:template std :: size_t 
BST_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^#define BST_H$/;"	macro	line:2
binary_search_tree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^template <class T> class binary_search_tree { $/;"	class	line:9
binary_search_tree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^    binary_search_tree() {$/;"	function	line:12	class:binary_search_tree	access:public	signature:()
search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^    binary_tree_node<T> *search(const T &key) const;$/;"	prototype	line:21	class:binary_search_tree	access:public	signature:(const T &key) const	returns:binary_tree_node <T> 
insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^    bool insert(const T &item);$/;"	prototype	line:29	class:binary_search_tree	access:public	signature:(const T &item)	returns:bool 
remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^    bool remove(const T &item);$/;"	prototype	line:37	class:binary_search_tree	access:public	signature:(const T &item)	returns:bool 
~binary_search_tree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^    ~binary_search_tree();$/;"	prototype	line:41	class:binary_search_tree	access:public	signature:()
is_balanced	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^    int is_balanced();$/;"	prototype	line:48	class:binary_search_tree	access:public	signature:()	returns:int 
operator <<	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^    template <class S>     friend std::ostream &operator<<(std::ostream &out, const binary_search_tree<S> &tree); $/;"	prototype	line:51	class:binary_search_tree	access:friend	signature:(std::ostream &out, const binary_search_tree<S> &tree)	returns:template friend std :: ostream 
get_root	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^    binary_tree_node<T> *get_root() { return root; }$/;"	function	line:53	class:binary_search_tree	access:public	signature:()	returns:binary_tree_node <T> 
root	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^    binary_tree_node<T> *root;$/;"	member	line:57	class:binary_search_tree	access:private
operator <<	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^template <class T> std::ostream &operator<<(std::ostream &out, const binary_tree_node<T> *root); $/;"	prototype	line:62	signature:(std::ostream &out, const binary_tree_node<T> *root)	returns:template std :: ostream 
check_balanced	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^template <class T> int check_balanced(binary_tree_node<T> *root); $/;"	prototype	line:69	signature:(binary_tree_node<T> *root)	returns:template int 
bst_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^template <class Item> bool bst_remove( $/;"	prototype	line:73	signature:( binary_tree_node<Item>*& root_ptr, const Item& target )	returns:template bool 
bst_remove_max	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.h	/^template <class Item> void bst_remove_max( $/;"	prototype	line:85	signature:( binary_tree_node<Item>*& root_ptr, Item& removed )	returns:template void 
DailyTemps	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.cpp	/^DailyTemps::DailyTemps() {$/;"	function	line:15	class:DailyTemps	signature:()	returns:DailyTemps :: 
setTemp	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.cpp	/^DailyTemps::setTemp() {$/;"	function	line:23	class:DailyTemps	signature:()	returns:DailyTemps :: 
Freezing	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.cpp	/^DailyTemps::Freezing() {$/;"	function	line:40	class:DailyTemps	signature:()	returns:DailyTemps :: 
Warmest	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.cpp	/^DailyTemps::Warmest(){$/;"	function	line:51	class:DailyTemps	signature:()	returns:DailyTemps :: 
printTemps	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.cpp	/^void DailyTemps::printTemps() {$/;"	function	line:64	class:DailyTemps	signature:()	returns:void DailyTemps :: 
MAIN_SAVITCH_NODE1_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^#define MAIN_SAVITCH_NODE1_H$/;"	macro	line:131
main_savitch_5	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^namespace main_savitch_5$/;"	namespace	line:134
node	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^    class node {$/;"	class	line:136	namespace:main_savitch_5
value_type	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^			typedef double value_type; $/;"	typedef	line:139	class:main_savitch_5::node	access:public
node	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^			node($/;"	function	line:142	class:main_savitch_5::node	access:public	signature:( const value_type& init_data = value_type( ), node* init_link = NULL )
set_data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^				void set_data(const value_type& new_data) { data_field = new_data; }$/;"	function	line:149	class:main_savitch_5::node	access:public	signature:(const value_type& new_data)	returns:void 
set_link	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^				void set_link(node* new_link)             { link_field = new_link; }$/;"	function	line:150	class:main_savitch_5::node	access:public	signature:(node* new_link)	returns:void 
data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^			value_type data( ) const { return data_field; }$/;"	function	line:153	class:main_savitch_5::node	access:public	signature:( ) const	returns:value_type 
link	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^			const node* link( ) const { return link_field; }$/;"	function	line:157	class:main_savitch_5::node	access:public	signature:( ) const	returns:const node 
link	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^			node* link( )		 	  { return link_field; }$/;"	function	line:158	class:main_savitch_5::node	access:public	signature:( )	returns:node 
data_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^			value_type data_field;$/;"	member	line:161	class:main_savitch_5::node	access:private
link_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^			node* link_field;$/;"	member	line:162	class:main_savitch_5::node	access:private
list_length	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^    std::size_t list_length(const node* head_ptr);$/;"	prototype	line:166	namespace:main_savitch_5	signature:(const node* head_ptr)	returns:std :: size_t 
list_head_insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^    void list_head_insert(node*& head_ptr, const node::value_type& entry); $/;"	prototype	line:167	namespace:main_savitch_5	signature:(node*& head_ptr, const node::value_type& entry)	returns:void 
list_insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^    void list_insert(node* previous_ptr, const node::value_type& entry);  $/;"	prototype	line:168	namespace:main_savitch_5	signature:(node* previous_ptr, const node::value_type& entry)	returns:void 
list_search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^    node* list_search(node* head_ptr, const node::value_type& target);$/;"	prototype	line:169	namespace:main_savitch_5	signature:(node* head_ptr, const node::value_type& target)	returns:node 
list_search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^    const node* list_search(const node* head_ptr, const node::value_type& target);$/;"	prototype	line:170	namespace:main_savitch_5	signature:(const node* head_ptr, const node::value_type& target)	returns:const node 
list_locate	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^    node* list_locate(node* head_ptr, std::size_t position);$/;"	prototype	line:171	namespace:main_savitch_5	signature:(node* head_ptr, std::size_t position)	returns:node 
list_locate	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^    const node* list_locate(const node* head_ptr, std::size_t position);$/;"	prototype	line:172	namespace:main_savitch_5	signature:(const node* head_ptr, std::size_t position)	returns:const node 
list_head_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^    void list_head_remove(node*& head_ptr);$/;"	prototype	line:173	namespace:main_savitch_5	signature:(node*& head_ptr)	returns:void 
list_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^    void list_remove(node* previous_ptr);$/;"	prototype	line:174	namespace:main_savitch_5	signature:(node* previous_ptr)	returns:void 
list_clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^    void list_clear(node*& head_ptr);$/;"	prototype	line:175	namespace:main_savitch_5	signature:(node*& head_ptr)	returns:void 
list_copy	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1\node1.h	/^    void list_copy(const node* source_ptr, node*& head_ptr, node*& tail_ptr);$/;"	prototype	line:176	namespace:main_savitch_5	signature:(const node* source_ptr, node*& head_ptr, node*& tail_ptr)	returns:void 
celsius_to_fahrenheit	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A0_Temperature\temperature.cpp	/^double celsius_to_fahrenheit(double c){$/;"	function	line:14	signature:(double c)	returns:double 
setup_cout_fractions	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A0_Temperature\temperature.cpp	/^void setup_cout_fractions(int fraction_digits){$/;"	function	line:22	signature:(int fraction_digits)	returns:void 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A0_Temperature\temperature.cpp	/^int main() {$/;"	function	line:35	signature:()	returns:int 
Throttle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.cpp	/^Throttle::Throttle() {$/;"	function	line:7	class:Throttle	signature:()	returns:Throttle :: 
Throttle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.cpp	/^Throttle::Throttle(int size) {$/;"	function	line:12	class:Throttle	signature:(int size)	returns:Throttle :: 
shift	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.cpp	/^void Throttle::shift(int amount) {$/;"	function	line:18	class:Throttle	signature:(int amount)	returns:void Throttle :: 
~Throttle	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\Throttle.cpp	/^Throttle::~Throttle()$/;"	function	line:26	class:Throttle	signature:()	returns:Throttle :: 
DAILYTEMPS_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^#define DAILYTEMPS_H$/;"	macro	line:8
DailyTemps	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^class DailyTemps$/;"	class	line:13
DailyTemps	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^	DailyTemps(); \/\/ Constructor$/;"	prototype	line:16	class:DailyTemps	access:public	signature:()
setTemp	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^	setTemp(); \/\/ Changes the temp of a user specified day$/;"	prototype	line:17	class:DailyTemps	access:public	signature:()
Freezing	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^	Freezing(); \/\/ Finds the number of freezing days$/;"	prototype	line:18	class:DailyTemps	access:public	signature:()
Warmest	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^	Warmest(); \/\/ Finds the warmest day$/;"	prototype	line:19	class:DailyTemps	access:public	signature:()
printTemps	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^	void printTemps(); \/\/ Prints the table of temps$/;"	prototype	line:20	class:DailyTemps	access:public	signature:()	returns:void 
temps	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^	int temps[7] = {0,0,0,0,0,0,0}; \/\/ Initializes the array of temperatures$/;"	member	line:22	class:DailyTemps	access:private
weekDays	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^	string weekDays[7] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"}; \/\/ Provides week days to correspond with the temps array$/;"	member	line:23	class:DailyTemps	access:private
freezingDays	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^	int freezingDays; \/\/ Stores the number of freezing days$/;"	member	line:24	class:DailyTemps	access:private
warmest	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^	int warmest; \/\/ Stores the index of the warmest day$/;"	member	line:25	class:DailyTemps	access:private
warmTemp	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^	int warmTemp; \/\/ Stores the temp of the warmest day$/;"	member	line:26	class:DailyTemps	access:private
dayChange	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^	string dayChange; \/\/ Stores the day to change the temp of$/;"	member	line:27	class:DailyTemps	access:private
newTemp	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\DailyTemps.h	/^	int newTemp; \/\/ stores the new temp the user specifies$/;"	member	line:28	class:DailyTemps	access:private
priority_queue_heap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.template	/^template <class T> priority_queue_heap<T>::priority_queue_heap(){} $/;"	function	line:12	class:priority_queue_heap	signature:()	returns:template priority_queue_heap <T> :: 
is_empty	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.template	/^template<class T> bool priority_queue_heap<T>::is_empty() const{ $/;"	function	line:16	class:priority_queue_heap	signature:() const	returns:template bool priority_queue_heap <T> :: 
is_full	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.template	/^template <class T> bool priority_queue_heap<T>::is_full() const{ $/;"	function	line:22	class:priority_queue_heap	signature:() const	returns:template bool priority_queue_heap <T> :: 
front	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.template	/^template <class T> T priority_queue_heap<T>::front(){ $/;"	function	line:28	class:priority_queue_heap	signature:()	returns:template T priority_queue_heap <T> :: 
size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.template	/^template <class T> int priority_queue_heap<T>:: size(){ $/;"	function	line:34	class:priority_queue_heap	signature:()	returns:template int priority_queue_heap <T> :: 
dequeue	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.template	/^template <class T> T priority_queue_heap<T>::dequeue(){ $/;"	function	line:40	class:priority_queue_heap	signature:()	returns:template T priority_queue_heap <T> :: 
enqueue	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.template	/^template <class T> void priority_queue_heap<T>::enqueue(const T& value){ $/;"	function	line:46	class:priority_queue_heap	signature:(const T& value)	returns:template void priority_queue_heap <T> :: 
print_queue	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.template	/^template <class T> void priority_queue_heap<T>::print_queue(){ $/;"	function	line:54	class:priority_queue_heap	signature:()	returns:template void priority_queue_heap <T> :: 
recycle_queue	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\PQ_Heap.template	/^template <class T> void priority_queue_heap<T>::recycle_queue(){ $/;"	function	line:63	class:priority_queue_heap	signature:()	returns:template void priority_queue_heap <T> :: 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A0_HelloWorld\HelloWorld.cpp	/^int main(){$/;"	function	line:12	signature:()	returns:int 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A1_Exercise2\TestTemps.cpp	/^int main() {$/;"	function	line:14	signature:()	returns:int 
buildTree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\myTestBST.cpp	/^template<class item> binary_tree_node<item> *buildTree(item *words, int low, int high); $/;"	prototype	line:20	signature:(item *words, int low, int high)	returns:template binary_tree_node <item> 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\myTestBST.cpp	/^int main(){$/;"	function	line:22	signature:()	returns:int 
buildTree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST\myTestBST.cpp	/^template<class item> binary_tree_node<item> *buildTree(item *words, int low, int high) { $/;"	function	line:48	signature:(item *words, int low, int high)	returns:template binary_tree_node <item> 
main	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Throttle\TestThrottle.cpp	/^int main() {$/;"	function	line:7	signature:()	returns:int 
search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.template	/^template <class T> binary_tree_node<T> *binary_search_tree<T>::search(const T &key) const { $/;"	function	line:6	class:binary_search_tree	signature:(const T &key) const	returns:template binary_tree_node <T> binary_search_tree <T> :: 
insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.template	/^template <class T> bool binary_search_tree<T>::insert(const T &item) { $/;"	function	line:23	class:binary_search_tree	signature:(const T &item)	returns:template bool binary_search_tree <T> :: 
~binary_search_tree	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.template	/^template <class T> binary_search_tree<T>::~binary_search_tree() { $/;"	function	line:52	class:binary_search_tree	signature:()	returns:template binary_search_tree <T> :: 
check_balanced	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.template	/^template <class T> int check_balanced(binary_tree_node<T> *root) { $/;"	function	line:62	signature:(binary_tree_node<T> *root)	returns:template int 
is_balanced	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.template	/^template <class T> int  binary_search_tree<T>::is_balanced() { $/;"	function	line:87	class:binary_search_tree	signature:()	returns:template int binary_search_tree <T> :: 
operator <<	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.template	/^template <class T> std::ostream &operator<<(std::ostream &out, const binary_tree_node<T> *root) { $/;"	function	line:92	signature:(std::ostream &out, const binary_tree_node<T> *root)	returns:template std :: ostream 
operator <<	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.template	/^template <class T> std::ostream &operator<<(std::ostream &out, const binary_search_tree<T> &tree) { $/;"	function	line:106	signature:(std::ostream &out, const binary_search_tree<T> &tree)	returns:template std :: ostream 
bst_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.template	/^template <class Item> bool bst_remove(binary_tree_node<Item>*& root_ptr, const Item& target) { $/;"	function	line:112	signature:(binary_tree_node<Item>*& root_ptr, const Item& target)	returns:template bool 
bst_remove_max	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.template	/^template <class Item> void bst_remove_max(binary_tree_node<Item>*& root_ptr, Item& removed) { $/;"	function	line:139	signature:(binary_tree_node<Item>*& root_ptr, Item& removed)	returns:template void 
remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A6_BST_FILE\bst.template	/^template <class T> bool binary_search_tree<T>::remove(const T &item) { $/;"	function	line:151	class:binary_search_tree	signature:(const T &item)	returns:template bool binary_search_tree <T> :: 



HEAP_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^#define HEAP_H$/;"	macro	line:7
heap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^template <class T> class heap { $/;"	class	line:12
CAPACITY	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^    static const int CAPACITY = 50;$/;"	member	line:14	class:heap	access:public
heap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^    heap() {$/;"	function	line:16	class:heap	access:public	signature:()
is_empty	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^    bool is_empty() const { return  size == 0;}$/;"	function	line:20	class:heap	access:public	signature:() const	returns:bool 
is_full	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^    bool is_full() const { return size == CAPACITY; }$/;"	function	line:21	class:heap	access:public	signature:() const	returns:bool 
remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^    T remove();$/;"	prototype	line:28	class:heap	access:public	signature:()	returns:T 
insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^    void insert(const T& value);$/;"	prototype	line:35	class:heap	access:public	signature:(const T& value)	returns:void 
check_heap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^    bool check_heap();$/;"	prototype	line:43	class:heap	access:public	signature:()	returns:bool 
get_data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^	T get_data(int index) { $/;"	function	line:45	class:heap	access:public	signature:(int index)	returns:T 
get_size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^	int get_size() { $/;"	function	line:49	class:heap	access:public	signature:()	returns:int 
recycle_heap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^	void recycle_heap();$/;"	prototype	line:53	class:heap	access:public	signature:()	returns:void 
data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^    T data[CAPACITY];$/;"	member	line:56	class:heap	access:private
size	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.h	/^    int size;$/;"	member	line:57	class:heap	access:private


insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.template	/^template <class T> void heap<T>::insert(const T& value) { $/;"	function	line:26	class:heap	signature:(const T& value)	returns:template void heap <T> :: 
remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.template	/^template <class T> T heap<T>::remove() { $/;"	function	line:54	class:heap	signature:()	returns:template T heap <T> :: 
check_heap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.template	/^template <class T> bool heap<T>::check_heap() { $/;"	function	line:123	class:heap	signature:()	returns:template bool heap <T> :: 
recycle_heap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A7_Heaps\heap.template	/^template<class T> void heap<T>::recycle_heap() { $/;"	function	line:146	class:heap	signature:()	returns:template void heap <T> :: 
_GLIBCXX_STRING	c:\MinGW\lib\gcc\mingw32\6.3.0\include\c++\string	/^#define _GLIBCXX_STRING	1$/;"	macro	line:34
main_savitch_5	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^namespace main_savitch_5 {$/;"	namespace	line:20
list_length	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^    size_t list_length(const node* head_ptr) {$/;"	function	line:22	namespace:main_savitch_5	signature:(const node* head_ptr)	returns:size_t 
list_head_insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^    void list_head_insert(node*& head_ptr, const node::value_type& entry) {$/;"	function	line:34	namespace:main_savitch_5	signature:(node*& head_ptr, const node::value_type& entry)	returns:void 
list_insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^    void list_insert(node* previous_ptr, const node::value_type& entry) {$/;"	function	line:38	namespace:main_savitch_5	signature:(node* previous_ptr, const node::value_type& entry)	returns:void 
list_search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^    node* list_search(node* head_ptr, const node::value_type& target) {$/;"	function	line:45	namespace:main_savitch_5	signature:(node* head_ptr, const node::value_type& target)	returns:node 
list_search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^    const node* list_search(const node* head_ptr, const node::value_type& target) {$/;"	function	line:55	namespace:main_savitch_5	signature:(const node* head_ptr, const node::value_type& target)	returns:const node 
list_locate	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^    node* list_locate(node* head_ptr, size_t position) {$/;"	function	line:65	namespace:main_savitch_5	signature:(node* head_ptr, size_t position)	returns:node 
list_locate	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^    const node* list_locate(const node* head_ptr, size_t position) {$/;"	function	line:77	namespace:main_savitch_5	signature:(const node* head_ptr, size_t position)	returns:const node 
list_head_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^    void list_head_remove(node*& head_ptr) {$/;"	function	line:90	namespace:main_savitch_5	signature:(node*& head_ptr)	returns:void 
list_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^    void list_remove(node* previous_ptr) {$/;"	function	line:98	namespace:main_savitch_5	signature:(node* previous_ptr)	returns:void 
list_clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^    void list_clear(node*& head_ptr) {$/;"	function	line:106	namespace:main_savitch_5	signature:(node*& head_ptr)	returns:void 
list_copy	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^    void list_copy(const node* source_ptr, node*& head_ptr, node*& tail_ptr) {$/;"	function	line:113	namespace:main_savitch_5	signature:(const node* source_ptr, node*& head_ptr, node*& tail_ptr)	returns:void 
delete_reps	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^	node* delete_reps(node* head_ptr) {$/;"	function	line:135	namespace:main_savitch_5	signature:(node* head_ptr)	returns:node 
sort_list	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^	void sort_list(node*& head_ptr) {$/;"	function	line:152	namespace:main_savitch_5	signature:(node*& head_ptr)	returns:void 
split_list	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.cpp	/^	node* split_list(node* head_ptr, node::value_type& split_value) {$/;"	function	line:171	namespace:main_savitch_5	signature:(node* head_ptr, node::value_type& split_value)	returns:node 
MAIN_SAVITCH_NODE1_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^#define MAIN_SAVITCH_NODE1_H$/;"	macro	line:131
main_savitch_5	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^namespace main_savitch_5$/;"	namespace	line:134
node	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^    class node {$/;"	class	line:136	namespace:main_savitch_5
value_type	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^			typedef double value_type; $/;"	typedef	line:139	class:main_savitch_5::node	access:public
node	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^			node($/;"	function	line:142	class:main_savitch_5::node	access:public	signature:( const value_type& init_data = value_type( ), node* init_link = NULL )
set_data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^				void set_data(const value_type& new_data) { data_field = new_data; }$/;"	function	line:149	class:main_savitch_5::node	access:public	signature:(const value_type& new_data)	returns:void 
set_link	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^				void set_link(node* new_link)             { link_field = new_link; }$/;"	function	line:150	class:main_savitch_5::node	access:public	signature:(node* new_link)	returns:void 
data	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^			value_type data( ) const { return data_field; }$/;"	function	line:153	class:main_savitch_5::node	access:public	signature:( ) const	returns:value_type 
link	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^			const node* link( ) const { return link_field; }$/;"	function	line:157	class:main_savitch_5::node	access:public	signature:( ) const	returns:const node 
link	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^			node* link( )		 	  { return link_field; }$/;"	function	line:158	class:main_savitch_5::node	access:public	signature:( )	returns:node 
data_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^			value_type data_field;$/;"	member	line:161	class:main_savitch_5::node	access:private
link_field	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^			node* link_field;$/;"	member	line:162	class:main_savitch_5::node	access:private
list_length	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^    std::size_t list_length(const node* head_ptr);$/;"	prototype	line:166	namespace:main_savitch_5	signature:(const node* head_ptr)	returns:std :: size_t 
list_head_insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^    void list_head_insert(node*& head_ptr, const node::value_type& entry); $/;"	prototype	line:167	namespace:main_savitch_5	signature:(node*& head_ptr, const node::value_type& entry)	returns:void 
list_insert	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^    void list_insert(node* previous_ptr, const node::value_type& entry);  $/;"	prototype	line:168	namespace:main_savitch_5	signature:(node* previous_ptr, const node::value_type& entry)	returns:void 
list_search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^    node* list_search(node* head_ptr, const node::value_type& target);$/;"	prototype	line:169	namespace:main_savitch_5	signature:(node* head_ptr, const node::value_type& target)	returns:node 
list_search	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^    const node* list_search(const node* head_ptr, const node::value_type& target);$/;"	prototype	line:170	namespace:main_savitch_5	signature:(const node* head_ptr, const node::value_type& target)	returns:const node 
list_locate	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^    node* list_locate(node* head_ptr, std::size_t position);$/;"	prototype	line:171	namespace:main_savitch_5	signature:(node* head_ptr, std::size_t position)	returns:node 
list_locate	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^    const node* list_locate(const node* head_ptr, std::size_t position);$/;"	prototype	line:172	namespace:main_savitch_5	signature:(const node* head_ptr, std::size_t position)	returns:const node 
list_head_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^    void list_head_remove(node*& head_ptr);$/;"	prototype	line:173	namespace:main_savitch_5	signature:(node*& head_ptr)	returns:void 
list_remove	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^    void list_remove(node* previous_ptr);$/;"	prototype	line:174	namespace:main_savitch_5	signature:(node* previous_ptr)	returns:void 
list_clear	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^    void list_clear(node*& head_ptr);$/;"	prototype	line:175	namespace:main_savitch_5	signature:(node*& head_ptr)	returns:void 
list_copy	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^    void list_copy(const node* source_ptr, node*& head_ptr, node*& tail_ptr);$/;"	prototype	line:176	namespace:main_savitch_5	signature:(const node* source_ptr, node*& head_ptr, node*& tail_ptr)	returns:void 
delete_reps	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^	node* delete_reps(node* head_ptr);$/;"	prototype	line:177	namespace:main_savitch_5	signature:(node* head_ptr)	returns:node 
sort_list	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^	void sort_list(node*& head_ptr);$/;"	prototype	line:178	namespace:main_savitch_5	signature:(node*& head_ptr)	returns:void 
split_list	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\A3_Node1_New\node1_New.h	/^	node* split_list(node* head_ptr, node::value_type& split_value);$/;"	prototype	line:179	namespace:main_savitch_5	signature:(node* head_ptr, node::value_type& split_value)	returns:node 
THINKING_CAP_H	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.h	/^#define THINKING_CAP_H$/;"	macro	line:2
Thinking_Cap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.h	/^class Thinking_Cap$/;"	class	line:7
Thinking_Cap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.h	/^	Thinking_Cap();$/;"	prototype	line:10	class:Thinking_Cap	access:public	signature:()
Read_Green	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.h	/^	Read_Green(string green);$/;"	prototype	line:11	class:Thinking_Cap	access:public	signature:(string green)
Read_Red	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.h	/^	Read_Red(string red);$/;"	prototype	line:12	class:Thinking_Cap	access:public	signature:(string red)
~Thinking_Cap	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.h	/^	~Thinking_Cap();$/;"	prototype	line:13	class:Thinking_Cap	access:public	signature:()
set_green	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.h	/^	set_green(string green);$/;"	prototype	line:15	class:Thinking_Cap	access:private	signature:(string green)
set_red	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.h	/^	set_red(string red);$/;"	prototype	line:16	class:Thinking_Cap	access:private	signature:(string red)
green	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.h	/^	string green;$/;"	member	line:17	class:Thinking_Cap	access:private
red	C:\Users\Jonathan\Documents\GitHub\CS_3305\CS_3305\Prct_Thinking_Cap\Thinking_Cap.h	/^	string red;$/;"	member	line:18	class:Thinking_Cap	access:private
